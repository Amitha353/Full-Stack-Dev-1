DOM(DOCUMENT OBJECT MODEL)
---------------------------
When something is loaded into the browser it gets converted into a DOM structure;(HTML, SVG, XML -> DOM)

<!DOCTYPE html>
<html>
  <head>
    <title>A simple Web Page</title>
    <meta name="author" content="Amitha">
  </head>
  <body>
    <h1>My Web Page</h1>
    <p>This web page is awesome!</p>
  </body>
</html>

In the memory of the browser it gets stored in a tree structure;
various nodes
---------------------
root -> top node;
parent
child
sibling
branch

Whitespace -> Whitespace node -> text node

<body><p>no white space node</p>

<body>
<p>whitespace node</p>
--------------------------------------------------------------------------------------------------------------------------------------
Node Relationships
-------------------
1. Handling parent -> parentNode
2. Handling child node -> childeNodes[],firstChild, lastChild
3. Handling Siblings -> previousSibling, nextSibling

----------------------------
function handleClick(event) {
  event.stopPropagation();//stop handling the event after it has been handled once;
  
  var node = event.target;
  var thisPath = node.nodeName;
  
  while(node.ParentNode) {
    node = node.parentNode;
    thisPath = node.nodeName + ">" + thisPath;
  }
  alert(thisPath);
}
--------------------------------------
//Register the click event handler for all
function attachHandler(node) {
  if(node == null) return;
  node.onclick = handleClick;//wheneevr some one clicks on that function make sure to run it;
  
  for(var i = 0 ; i < node.childNodes.length; i++)
    attachHandler(node.childNodes[i]);
}
--------------------------------------------------------
Locating Nodes
-------------
1. getElementsByTagName()
2. getElementById()
3. setAttribute()

The DOM
-------
Everything is in the DOM. We can add/ delete/ copy/ change ;

3 ways to locate something in the DOM structure
-----------------------------------------------
1. Use the exact DOM path
-> root to particular node;

2. Use getElementsByTagName()
-> need element -> h3, h2,
-> need to be specific;

3. Use getElementById()
easiest way;
-> need a unique name.
<element_name id="thing">.....</element_name>
----------------------------------
<head>
  <script>
    function change_color1() {
      document.childNodes[0].childNodes[2].childNodes[1].style.color="red";
    }
    function change_color2() {
      document.getElementsByTagName("h2").style.color="yellow";
    }
    function change_color1() {
      document.getElementById("cute_text").style.color="blue";
    }
  </script>
</head>
<body>
  <h2 style="color:black" id="cute_text">
  Click on a button to change the color
  </h2>
  <form>
    <input onclick="change_color1()" type="button" value="Change using method 1">
    <input onclick="change_color2()" type="button" value="Change using method 2">
    <input onclick="change_color3()" type="button" value="Change using method 3">
  </form>
</body>

--------------------------------------------------------------------------------------------------
SETATTRIBUTE()
--------------------
Common way to change something;

the_node = getElementById("thisNode");
the_node.setAttribute("style","color:red");

------------------------------------------------------------------------------------------------------------
Creating and Adding Nodes
--------------------------
I. Creating a node
  a. createElement()
  b. createTextNode()

II. Adding a node
  a. insertBefore()
  b. appendChild()
 
-> Adding to a web page
------------------------
* First create whatever you want to add, whatever is created is not yet in the DOM;
* Second, add it at the desired place;

Creating Nodes and Add
----------
result = document.craeteElement("div");
result = document.createTextNode("Hello");//Texts are handled;

newItem = document.createElement("hr");
destParent = document.getElementsBytagName("body")[0];
destParent.insertBefore(newItem, destParent.firstChild);// insert before the firstchild;

*using insertBefore
----------------------
<head>
  <script>
    function insert_new_text() {
      var newItem = document.createElement("hr");
      var destParent = document.getElementsBytagName("body")[0];
      destParent.insertBefore(newItem, destParent.firstChild);
    }
  </script>
</head>
<body onclick="insert_new_text()">
  <h1 id="my_text">Please click on the page</h1>
</body>
---------------------------------------------------------------
* using appendChild()
-----------------------
<head>
  <script>
    function insert_new_text() {
      var newText = document.createTextNode("This is dynamically added Text!");
      var textpart = document.getElementsById("my_text");
      textpart.appendChild(newText);
    }
  </script>
</head>
<body onclick="insert_new_text()">
  <h1 id="my_text">Please click on the page</h1>
</body>
-----------------------------------------------------------------------------------------------------------------------
Deleting Nodes
-------------------
-> Removing Nodes -> removeChild()
Tell the parent to remove the child;

this_node = getElementById("myPara");
this_node.parentNode.removeChild(this_node);

3 ways to remove the node
--------------------------
a. var this_node = document.getElementById("firstP");
   this_node.parentNode.removeChild(this_node);
   
 b. var this_node = document.getElementByTagName("p")[0];
   this_node.parentNode.removeChild(this_node);
 
 c. var this_parent = document.getElementById("theBody");
   this_node.parentNode.removeChild(this_parent.firstChild);
 
 <head>
  <script>
    function delete1() {
      var this_node = document.getElementById("firstP");
       this_node.parentNode.removeChild(this_node);
    }
    function delete2() {
      var this_node = document.getElementByTagName("p")[0];
       this_node.parentNode.removeChild(this_node);
    }
    function delete3() {
      var this_parent = document.getElementById("theBody");
      this_node.parentNode.removeChild(this_parent.firstChild);
    }
    function delete_all_child() {
      var theNode = document.getElementById("theBody");
        while(theNode.firstChild)
        theNode.removeChild(theNode.firstChild);
    }
  </script>
 </head>
 <body id="theBody">
  <p id="firstP">
  Hello.
  </p>
  How are you?
  <br>
  <p id="secondP">
  It's a nice day!
  </p>
  <button type="button" onclick="delete1()">Example 1</button>
  <button type="button" onclick="delete2()">Example 2</button>
  <button type="button" onclick="delete3()">Example 3</button>
  <button type="button" onclick="delete_all_child()">Example 4</button>
  <p>
  Reload the page to reset the DOM.
  </p>
 </body>

Deleting all children
---------------------
var theNode = document.getElementById("theBody");

while(theNode.firstChild)
  theNode.removeChild(theNode.firstChild);
-----------------------------------------------------------------------------------------------------------------------------------
Cloning/Copying Nodes
-------------------
a. Copying a node -> the_node.cloneNode() / the_node.CloneNode(false)
b. Copying a branch -> the_node.cloneNode(true)
c. Adding Node(s) -? dest.appendChild(the_node)

Basic Idea 
--------
1. Copying node(s) from the DOM;
2. Paste the copied node(s) in the DOM;

case I : the_node.cloneNode()
-------------------------------
 <body>
  <script>
    function myFunction() {
      var the_node = documnet.getElementById("myList").lastChild;
      var the_clone = the_node.cloneNode();
      document.getElementById("myList").appendChild(the_clone);
    }
  </script>
  <ul id="myList">
    <li>Good Morning</li>
    <li>Hello</li>
  </ul>
  
  <p>Click on the button to cloneNode(false)</p>
  <button onclick="myFunction()">Copy It!</button>
 </body>

output
-----
. Good Morning
. Hello
.
.
.

case II : the_node.cloneNode(true)
-------------------------------
 <body>
  <script>
    function myFunction() {
      var the_node = documnet.getElementById("myList").lastChild;
      var the_clone = the_node.cloneNode(true);
      document.getElementById("myList").appendChild(the_clone);
    }
  </script>
  <ul id="myList">
    <li>Good Morning</li>
    <li>Hello</li>
  </ul>
  
  <p>Click on the button to cloneNode(true)</p>
  <button onclick="myFunction()">Copy It!</button>
 </body>

output
-----
. Good Morning
. Hello
. Hello
. Hello
. Hello

